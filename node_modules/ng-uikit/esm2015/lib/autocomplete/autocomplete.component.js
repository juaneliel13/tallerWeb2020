/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { HttpClient } from '@angular/common/http';
export class AutocompleteComponent {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.label = 'Name';
        this.selected = new EventEmitter();
        this.helpText = 'Enter at least 2 char to search';
        this.filteredList = [];
        this.selectedItem = (this.niddle) ? {} : "";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.sourceURL) {
            this.loadResponse();
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    filter(key) {
        if (key && key.length >= 2) {
            this.filteredList = this.filterResult(key);
            console.log(this.filteredList);
        }
        else {
            this.filteredList = [];
            this.selectedItem = (this.niddle) ? {} : "";
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    filterResult(key) {
        /** @type {?} */
        const result = [];
        this.source.forEach((item) => {
            /** @type {?} */
            const name = (this.niddle) ? item[this.niddle].toLowerCase() : item.toString().toLowerCase();
            if (name.indexOf(key.toLowerCase()) !== -1 && (result.length < 10)) {
                result.push(item);
            }
            else {
                return true;
            }
        });
        return result;
    }
    /**
     * @return {?}
     */
    loadResponse() {
        /** @type {?} */
        const url = this.sourceURL || '../../assets/autocomplete.json';
        this.http.get(url).subscribe((res) => {
            if (Array.isArray(res)) {
                this.source = res;
            }
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    getText(item) {
        return (this.niddle) ? item[this.niddle] : item;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    selectItem(item) {
        this.selectedItem = item;
        this.filteredList = [];
        this.selected.emit(item);
    }
}
AutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'ui-autocomplete',
                template: `<div class="form-group ui-autocomplete">
  <label for="UIAutocomplete">{{label}}</label>
  <input *ngIf="niddle" type="text" class="form-control" id="UIAutocomplete1" aria-describedby="emailHelp" placeholder="Enter {{label}}"
         [ngModel]="selectedItem[niddle]" (keyup)="filter($event.target.value)" autocomplete="off">

  <input *ngIf="!niddle" type="text" class="form-control" id="UIAutocomplete" aria-describedby="emailHelp" placeholder="Enter {{label}}"
         [ngModel]="selectedItem" (keyup)="filter($event.target.value)" autocomplete="off">
  <small id="emailHelp" class="form-text text-muted" *ngIf="helpText">{{helpText}}</small>
  <div class="ui-autocomplete-container">
    <ul class="list-group ui-autocomplete-list" *ngIf="filteredList.length">
      <li class="list-group-item ui-autocomplete-list-item" (click)="selectItem(item)" *ngFor="let item of filteredList">{{getText(item)}}</li>
    </ul>
  </div>
</div>
`,
                styles: [`.ui-autocomplete-container{position:relative}.ui-autocomplete-list{position:absolute;z-index:9;width:100%}.ui-autocomplete-list-item:hover{cursor:pointer;color:#fff;background-color:#007bff;border-color:#007bff}`]
            },] },
];
AutocompleteComponent.ctorParameters = () => [
    { type: HttpClient }
];
AutocompleteComponent.propDecorators = {
    source: [{ type: Input }],
    sourceURL: [{ type: Input }],
    niddle: [{ type: Input }],
    label: [{ type: Input }],
    selected: [{ type: Output }],
    helpText: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AutocompleteComponent.prototype.source;
    /** @type {?} */
    AutocompleteComponent.prototype.sourceURL;
    /** @type {?} */
    AutocompleteComponent.prototype.niddle;
    /** @type {?} */
    AutocompleteComponent.prototype.label;
    /** @type {?} */
    AutocompleteComponent.prototype.selected;
    /** @type {?} */
    AutocompleteComponent.prototype.helpText;
    /** @type {?} */
    AutocompleteComponent.prototype.filteredList;
    /** @type {?} */
    AutocompleteComponent.prototype.selectedItem;
    /**
     * @type {?}
     * @private
     */
    AutocompleteComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXVpa2l0LyIsInNvdXJjZXMiOlsibGliL2F1dG9jb21wbGV0ZS9hdXRvY29tcGxldGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQXFCaEQsTUFBTTs7OztJQVVKLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFOM0IsVUFBSyxHQUFHLE1BQU0sQ0FBQztRQUNkLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9CLGFBQVEsR0FBRyxpQ0FBaUMsQ0FBQztRQUN0RCxpQkFBWSxHQUFVLEVBQUUsQ0FBQztRQUN6QixpQkFBWSxHQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUc1QyxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixDQUFDO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBRztRQUNSLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzlDLENBQUM7SUFDSCxDQUFDOzs7OztJQUVELFlBQVksQ0FBQyxHQUFHOztjQUNSLE1BQU0sR0FBVSxFQUFFO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7O2tCQUNyQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUU7WUFDNUYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2QsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7O0lBRUQsWUFBWTs7Y0FDSixHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxnQ0FBZ0M7UUFDOUQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDbkMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQ3BCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLElBQUk7UUFDVixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsRCxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxJQUFJO1FBQ2IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7O1lBOUVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7O0NBY1g7Z0JBQ0MsTUFBTSxFQUFFLENBQUMscU5BQXFOLENBQUM7YUFDaE87OztZQXBCTyxVQUFVOzs7cUJBc0JmLEtBQUs7d0JBQ0wsS0FBSztxQkFDTCxLQUFLO29CQUNMLEtBQUs7dUJBQ0wsTUFBTTt1QkFDTixLQUFLOzs7O0lBTE4sdUNBQXVCOztJQUN2QiwwQ0FBMkI7O0lBQzNCLHVDQUFnQjs7SUFDaEIsc0NBQXdCOztJQUN4Qix5Q0FBd0M7O0lBQ3hDLHlDQUFzRDs7SUFDdEQsNkNBQXlCOztJQUN6Qiw2Q0FBNEM7Ozs7O0lBRWhDLHFDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndWktYXV0b2NvbXBsZXRlJyxcbiAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCB1aS1hdXRvY29tcGxldGVcIj5cbiAgPGxhYmVsIGZvcj1cIlVJQXV0b2NvbXBsZXRlXCI+e3tsYWJlbH19PC9sYWJlbD5cbiAgPGlucHV0ICpuZ0lmPVwibmlkZGxlXCIgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGlkPVwiVUlBdXRvY29tcGxldGUxXCIgYXJpYS1kZXNjcmliZWRieT1cImVtYWlsSGVscFwiIHBsYWNlaG9sZGVyPVwiRW50ZXIge3tsYWJlbH19XCJcbiAgICAgICAgIFtuZ01vZGVsXT1cInNlbGVjdGVkSXRlbVtuaWRkbGVdXCIgKGtleXVwKT1cImZpbHRlcigkZXZlbnQudGFyZ2V0LnZhbHVlKVwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiPlxuXG4gIDxpbnB1dCAqbmdJZj1cIiFuaWRkbGVcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJVSUF1dG9jb21wbGV0ZVwiIGFyaWEtZGVzY3JpYmVkYnk9XCJlbWFpbEhlbHBcIiBwbGFjZWhvbGRlcj1cIkVudGVyIHt7bGFiZWx9fVwiXG4gICAgICAgICBbbmdNb2RlbF09XCJzZWxlY3RlZEl0ZW1cIiAoa2V5dXApPVwiZmlsdGVyKCRldmVudC50YXJnZXQudmFsdWUpXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCI+XG4gIDxzbWFsbCBpZD1cImVtYWlsSGVscFwiIGNsYXNzPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIiAqbmdJZj1cImhlbHBUZXh0XCI+e3toZWxwVGV4dH19PC9zbWFsbD5cbiAgPGRpdiBjbGFzcz1cInVpLWF1dG9jb21wbGV0ZS1jb250YWluZXJcIj5cbiAgICA8dWwgY2xhc3M9XCJsaXN0LWdyb3VwIHVpLWF1dG9jb21wbGV0ZS1saXN0XCIgKm5nSWY9XCJmaWx0ZXJlZExpc3QubGVuZ3RoXCI+XG4gICAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW0gdWktYXV0b2NvbXBsZXRlLWxpc3QtaXRlbVwiIChjbGljayk9XCJzZWxlY3RJdGVtKGl0ZW0pXCIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgZmlsdGVyZWRMaXN0XCI+e3tnZXRUZXh0KGl0ZW0pfX08L2xpPlxuICAgIDwvdWw+XG4gIDwvZGl2PlxuPC9kaXY+XG5gLFxuICBzdHlsZXM6IFtgLnVpLWF1dG9jb21wbGV0ZS1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmV9LnVpLWF1dG9jb21wbGV0ZS1saXN0e3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6OTt3aWR0aDoxMDAlfS51aS1hdXRvY29tcGxldGUtbGlzdC1pdGVtOmhvdmVye2N1cnNvcjpwb2ludGVyO2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMDA3YmZmO2JvcmRlci1jb2xvcjojMDA3YmZmfWBdXG59KVxuZXhwb3J0IGNsYXNzIEF1dG9jb21wbGV0ZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIHNvdXJjZTogYW55W107XG4gIEBJbnB1dCgpIHNvdXJjZVVSTDogc3RyaW5nO1xuICBASW5wdXQoKSBuaWRkbGU7XG4gIEBJbnB1dCgpIGxhYmVsID0gJ05hbWUnO1xuICBAT3V0cHV0KCkgc2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgpIGhlbHBUZXh0ID0gJ0VudGVyIGF0IGxlYXN0IDIgY2hhciB0byBzZWFyY2gnO1xuICBmaWx0ZXJlZExpc3Q6IGFueVtdID0gW107XG4gIHNlbGVjdGVkSXRlbTogYW55ID0gKHRoaXMubmlkZGxlKSA/IHt9IDogXCJcIjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnNvdXJjZVVSTCkge1xuICAgICAgdGhpcy5sb2FkUmVzcG9uc2UoKTtcbiAgICB9XG4gIH1cblxuICBmaWx0ZXIoa2V5KSB7XG4gICAgaWYgKGtleSAmJiBrZXkubGVuZ3RoID49IDIpIHtcbiAgICAgIHRoaXMuZmlsdGVyZWRMaXN0ID0gdGhpcy5maWx0ZXJSZXN1bHQoa2V5KTtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuZmlsdGVyZWRMaXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5maWx0ZXJlZExpc3QgPSBbXTtcbiAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gKHRoaXMubmlkZGxlKSA/IHt9IDogXCJcIjtcbiAgICB9XG4gIH1cblxuICBmaWx0ZXJSZXN1bHQoa2V5KSB7XG4gICAgY29uc3QgcmVzdWx0OiBhbnlbXSA9IFtdO1xuICAgIHRoaXMuc291cmNlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSAodGhpcy5uaWRkbGUpID8gaXRlbVt0aGlzLm5pZGRsZV0udG9Mb3dlckNhc2UoKSA6IGl0ZW0udG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKG5hbWUuaW5kZXhPZihrZXkudG9Mb3dlckNhc2UoKSkgIT09IC0xICYmIChyZXN1bHQubGVuZ3RoIDwgMTApKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGxvYWRSZXNwb25zZSgpIHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLnNvdXJjZVVSTCB8fCAnLi4vLi4vYXNzZXRzL2F1dG9jb21wbGV0ZS5qc29uJztcbiAgICB0aGlzLmh0dHAuZ2V0KHVybCkuc3Vic2NyaWJlKChyZXMpID0+IHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSByZXM7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXRUZXh0KGl0ZW0pIHtcbiAgICByZXR1cm4gKHRoaXMubmlkZGxlKSA/IGl0ZW1bdGhpcy5uaWRkbGVdIDogaXRlbTtcbiAgfVxuXG4gIHNlbGVjdEl0ZW0oaXRlbSkge1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gaXRlbTtcbiAgICB0aGlzLmZpbHRlcmVkTGlzdCA9IFtdO1xuICAgIHRoaXMuc2VsZWN0ZWQuZW1pdChpdGVtKTtcbiAgfVxufVxuIl19