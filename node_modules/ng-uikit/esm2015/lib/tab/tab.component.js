/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { TabPanelComponent } from "./tab-panel/tab-panel.component";
export class TabComponent {
    constructor() {
        this.optionTabAfter = 3;
        this.isShowDropdown = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    toggleDropdown() {
        this.isShowDropdown = !this.isShowDropdown;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    toggle(i) {
        this.tabPanels.forEach(tab => {
            tab.isOpen = (tab.index === i);
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.tabs = [];
        this.optionTabs = [];
        /** @type {?} */
        let count = 0;
        this.tabPanels.map(tab => {
            /** @type {?} */
            const tabItem = {
                headerText: tab.header,
                index: tab.index,
                isOpen: !!tab
            };
            count++;
            this.optionTabAfter = (this.optionTabAfter >= this.tabPanels.length) ? this.tabPanels.length : this.optionTabAfter;
            if (count <= this.optionTabAfter) {
                this.tabs.push(tabItem);
            }
            else {
                this.optionTabs.push(tabItem);
            }
        });
        console.log(this.tabs, this.optionTabs);
    }
}
TabComponent.decorators = [
    { type: Component, args: [{
                selector: 'ui-tab',
                template: `<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item" *ngFor="let item of tabs;index as i">
    <a class="nav-link "
       [attr.id]="'tab'+item.index"
       data-toggle="tab"
       (click)="toggle(item.index)"
       role="tab" aria-controls="home"
       [attr.aria-selected]="item.isOpen"
       [ngClass]="{'active':item.isOpen}">
      {{item.headerText}}
    </a>
  </li>
  <li role="presentation" class="dropdown" *ngIf="optionTabs.length" [ngClass]="{'show': isShowDropdown}">
    <a class="dropdown-toggle" id="myTabDrop" (click)="toggleDropdown()" data-toggle="dropdown" aria-controls="myTabDrop-contents" attr.aria-expanded="{{isShowDropdown}}">more
      <span class="caret"></span>
    </a>
    <ul class="dropdown-menu" aria-labelledby="myTabDrop" id="myTabDrop1-contents" [ngClass]="{'show': isShowDropdown}">
      <li *ngFor="let item of optionTabs">
        <a [attr.id]="'tab'+item.index"
           data-toggle="tab"
           (click)="toggle(item.index)"
           role="tab" aria-controls="home"
           [attr.aria-selected]="item.isOpen"
           [ngClass]="{'active':item.isOpen}">
          {{item.headerText}}</a>
      </li>
    </ul>
  </li>
</ul>
<div class="tab-content" id="myTabContent">
  <ng-content></ng-content>
</div>
`,
                styles: [``]
            },] },
];
TabComponent.ctorParameters = () => [];
TabComponent.propDecorators = {
    optionTabAfter: [{ type: Input }],
    tabPanels: [{ type: ContentChildren, args: [TabPanelComponent,] }]
};
if (false) {
    /** @type {?} */
    TabComponent.prototype.optionTabAfter;
    /** @type {?} */
    TabComponent.prototype.tabs;
    /** @type {?} */
    TabComponent.prototype.optionTabs;
    /** @type {?} */
    TabComponent.prototype.tabPanels;
    /** @type {?} */
    TabComponent.prototype.isShowDropdown;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXVpa2l0LyIsInNvdXJjZXMiOlsibGliL3RhYi90YWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQW1CLFNBQVMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQXVDbEUsTUFBTTtJQVFKO1FBUFMsbUJBQWMsR0FBVyxDQUFDLENBQUM7UUFLcEMsbUJBQWMsR0FBWSxLQUFLLENBQUM7SUFHaEMsQ0FBQzs7OztJQUVELFFBQVE7SUFFUixDQUFDOzs7O0lBRUQsY0FBYztRQUNaLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLENBQUM7UUFDTixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMzQixHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQTs7WUFDaEIsS0FBSyxHQUFHLENBQUM7UUFDYixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTs7a0JBQ2pCLE9BQU8sR0FBRztnQkFDZCxVQUFVLEVBQUUsR0FBRyxDQUFDLE1BQU07Z0JBQ3RCLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztnQkFDaEIsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHO2FBQ2Q7WUFDRCxLQUFLLEVBQUUsQ0FBQztZQUNSLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQ25ILEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztnQkFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDekMsQ0FBQzs7O1lBakZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWdDWDtnQkFDQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDYjs7Ozs2QkFFRSxLQUFLO3dCQUdMLGVBQWUsU0FBQyxpQkFBaUI7Ozs7SUFIbEMsc0NBQW9DOztJQUNwQyw0QkFBbUI7O0lBQ25CLGtDQUF5Qjs7SUFDekIsaUNBQTRFOztJQUU1RSxzQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgT25Jbml0LCBRdWVyeUxpc3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1RhYlBhbmVsQ29tcG9uZW50fSBmcm9tIFwiLi90YWItcGFuZWwvdGFiLXBhbmVsLmNvbXBvbmVudFwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd1aS10YWInLFxyXG4gIHRlbXBsYXRlOiBgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzXCIgaWQ9XCJteVRhYlwiIHJvbGU9XCJ0YWJsaXN0XCI+XHJcbiAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiAqbmdGb3I9XCJsZXQgaXRlbSBvZiB0YWJzO2luZGV4IGFzIGlcIj5cclxuICAgIDxhIGNsYXNzPVwibmF2LWxpbmsgXCJcclxuICAgICAgIFthdHRyLmlkXT1cIid0YWInK2l0ZW0uaW5kZXhcIlxyXG4gICAgICAgZGF0YS10b2dnbGU9XCJ0YWJcIlxyXG4gICAgICAgKGNsaWNrKT1cInRvZ2dsZShpdGVtLmluZGV4KVwiXHJcbiAgICAgICByb2xlPVwidGFiXCIgYXJpYS1jb250cm9scz1cImhvbWVcIlxyXG4gICAgICAgW2F0dHIuYXJpYS1zZWxlY3RlZF09XCJpdGVtLmlzT3BlblwiXHJcbiAgICAgICBbbmdDbGFzc109XCJ7J2FjdGl2ZSc6aXRlbS5pc09wZW59XCI+XHJcbiAgICAgIHt7aXRlbS5oZWFkZXJUZXh0fX1cclxuICAgIDwvYT5cclxuICA8L2xpPlxyXG4gIDxsaSByb2xlPVwicHJlc2VudGF0aW9uXCIgY2xhc3M9XCJkcm9wZG93blwiICpuZ0lmPVwib3B0aW9uVGFicy5sZW5ndGhcIiBbbmdDbGFzc109XCJ7J3Nob3cnOiBpc1Nob3dEcm9wZG93bn1cIj5cclxuICAgIDxhIGNsYXNzPVwiZHJvcGRvd24tdG9nZ2xlXCIgaWQ9XCJteVRhYkRyb3BcIiAoY2xpY2spPVwidG9nZ2xlRHJvcGRvd24oKVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWNvbnRyb2xzPVwibXlUYWJEcm9wLWNvbnRlbnRzXCIgYXR0ci5hcmlhLWV4cGFuZGVkPVwie3tpc1Nob3dEcm9wZG93bn19XCI+bW9yZVxyXG4gICAgICA8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPlxyXG4gICAgPC9hPlxyXG4gICAgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiIGFyaWEtbGFiZWxsZWRieT1cIm15VGFiRHJvcFwiIGlkPVwibXlUYWJEcm9wMS1jb250ZW50c1wiIFtuZ0NsYXNzXT1cInsnc2hvdyc6IGlzU2hvd0Ryb3Bkb3dufVwiPlxyXG4gICAgICA8bGkgKm5nRm9yPVwibGV0IGl0ZW0gb2Ygb3B0aW9uVGFic1wiPlxyXG4gICAgICAgIDxhIFthdHRyLmlkXT1cIid0YWInK2l0ZW0uaW5kZXhcIlxyXG4gICAgICAgICAgIGRhdGEtdG9nZ2xlPVwidGFiXCJcclxuICAgICAgICAgICAoY2xpY2spPVwidG9nZ2xlKGl0ZW0uaW5kZXgpXCJcclxuICAgICAgICAgICByb2xlPVwidGFiXCIgYXJpYS1jb250cm9scz1cImhvbWVcIlxyXG4gICAgICAgICAgIFthdHRyLmFyaWEtc2VsZWN0ZWRdPVwiaXRlbS5pc09wZW5cIlxyXG4gICAgICAgICAgIFtuZ0NsYXNzXT1cInsnYWN0aXZlJzppdGVtLmlzT3Blbn1cIj5cclxuICAgICAgICAgIHt7aXRlbS5oZWFkZXJUZXh0fX08L2E+XHJcbiAgICAgIDwvbGk+XHJcbiAgICA8L3VsPlxyXG4gIDwvbGk+XHJcbjwvdWw+XHJcbjxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiIGlkPVwibXlUYWJDb250ZW50XCI+XHJcbiAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG48L2Rpdj5cclxuYCxcclxuICBzdHlsZXM6IFtgYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFRhYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgQElucHV0KCkgb3B0aW9uVGFiQWZ0ZXI6IG51bWJlciA9IDM7XHJcbiAgcHVibGljIHRhYnM6IGFueVtdO1xyXG4gIHB1YmxpYyBvcHRpb25UYWJzOiBhbnlbXTtcclxuICBAQ29udGVudENoaWxkcmVuKFRhYlBhbmVsQ29tcG9uZW50KSB0YWJQYW5lbHM6IFF1ZXJ5TGlzdDxUYWJQYW5lbENvbXBvbmVudD47XHJcblxyXG4gIGlzU2hvd0Ryb3Bkb3duOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRHJvcGRvd24oKSB7XHJcbiAgICB0aGlzLmlzU2hvd0Ryb3Bkb3duID0gIXRoaXMuaXNTaG93RHJvcGRvd247XHJcbiAgfVxyXG5cclxuICB0b2dnbGUoaSkge1xyXG4gICAgdGhpcy50YWJQYW5lbHMuZm9yRWFjaCh0YWIgPT4ge1xyXG4gICAgICB0YWIuaXNPcGVuID0gKHRhYi5pbmRleCA9PT0gaSlcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy50YWJzID0gW107XHJcbiAgICB0aGlzLm9wdGlvblRhYnMgPSBbXVxyXG4gICAgbGV0IGNvdW50ID0gMDtcclxuICAgIHRoaXMudGFiUGFuZWxzLm1hcCh0YWIgPT4ge1xyXG4gICAgICBjb25zdCB0YWJJdGVtID0ge1xyXG4gICAgICAgIGhlYWRlclRleHQ6IHRhYi5oZWFkZXIsXHJcbiAgICAgICAgaW5kZXg6IHRhYi5pbmRleCxcclxuICAgICAgICBpc09wZW46ICEhdGFiXHJcbiAgICAgIH07XHJcbiAgICAgIGNvdW50Kys7XHJcbiAgICAgIHRoaXMub3B0aW9uVGFiQWZ0ZXIgPSAodGhpcy5vcHRpb25UYWJBZnRlciA+PSB0aGlzLnRhYlBhbmVscy5sZW5ndGgpID8gdGhpcy50YWJQYW5lbHMubGVuZ3RoIDogdGhpcy5vcHRpb25UYWJBZnRlcjtcclxuICAgICAgaWYgKGNvdW50IDw9IHRoaXMub3B0aW9uVGFiQWZ0ZXIpIHtcclxuICAgICAgICB0aGlzLnRhYnMucHVzaCh0YWJJdGVtKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLm9wdGlvblRhYnMucHVzaCh0YWJJdGVtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLnRhYnMsIHRoaXMub3B0aW9uVGFicylcclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=