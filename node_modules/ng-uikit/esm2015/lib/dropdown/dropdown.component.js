/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/**
 * @record
 */
export function Item() { }
if (false) {
    /** @type {?} */
    Item.prototype.url;
    /** @type {?} */
    Item.prototype.text;
    /** @type {?|undefined} */
    Item.prototype.isDivider;
}
export class DropdownComponent {
    constructor() {
        this.items = [];
        this.buttonText = 'Your Button Text';
        this.isShowDropdown = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.isShowDropdown = this.isOpen || false;
    }
    /**
     * @return {?}
     */
    toggle() {
        this.isShowDropdown = !this.isShowDropdown;
    }
}
DropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'ui-dropdown',
                template: `<div class="dropdown show" [ngClass]="{'show': isShowDropdown}">
  <a class="btn btn-secondary dropdown-toggle" (click)="toggle()" role="button" id="dropdownMenuLink" data-toggle="dropdown"
     aria-haspopup="true" attr.aria-expanded="{{isShowDropdown}}">
    {{buttonText}}
  </a>
  <div class="dropdown-menu dropdown-menu-right" [ngClass]="{'show': isShowDropdown}" aria-labelledby="dropdownMenuLink">
    <ng-container *ngFor="let item of items">
      <a class="dropdown-item" href="{{item.url}}" >{{item.text}}</a>
      <div class="dropdown-divider" *ngIf="item.isDivider"></div>
    </ng-container>
    <ng-content></ng-content>
  </div>
</div>
`,
                styles: [``]
            },] },
];
DropdownComponent.ctorParameters = () => [];
DropdownComponent.propDecorators = {
    items: [{ type: Input }],
    buttonText: [{ type: Input }],
    isOpen: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DropdownComponent.prototype.items;
    /** @type {?} */
    DropdownComponent.prototype.buttonText;
    /** @type {?} */
    DropdownComponent.prototype.isOpen;
    /** @type {?} */
    DropdownComponent.prototype.isShowDropdown;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctdWlraXQvIiwic291cmNlcyI6WyJsaWIvZHJvcGRvd24vZHJvcGRvd24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQzs7OztBQUV2RCwwQkFJQzs7O0lBSEMsbUJBQVk7O0lBQ1osb0JBQWE7O0lBQ2IseUJBQW9COztBQXFCdEIsTUFBTTtJQU1KO1FBTFMsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUNuQixlQUFVLEdBQUcsa0JBQWtCLENBQUM7UUFFekMsbUJBQWMsR0FBRyxLQUFLLENBQUM7SUFHdkIsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDO0lBQzdDLENBQUM7Ozs7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0MsQ0FBQzs7O1lBakNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7O0NBYVg7Z0JBQ0MsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2I7Ozs7b0JBRUUsS0FBSzt5QkFDTCxLQUFLO3FCQUNMLEtBQUs7Ozs7SUFGTixrQ0FBNEI7O0lBQzVCLHVDQUF5Qzs7SUFDekMsbUNBQWdCOztJQUNoQiwyQ0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEl0ZW0ge1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIHRleHQ6IHN0cmluZztcclxuICBpc0RpdmlkZXI/OiBib29sZWFuO1xyXG59XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3VpLWRyb3Bkb3duJyxcclxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJkcm9wZG93biBzaG93XCIgW25nQ2xhc3NdPVwieydzaG93JzogaXNTaG93RHJvcGRvd259XCI+XHJcbiAgPGEgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBkcm9wZG93bi10b2dnbGVcIiAoY2xpY2spPVwidG9nZ2xlKClcIiByb2xlPVwiYnV0dG9uXCIgaWQ9XCJkcm9wZG93bk1lbnVMaW5rXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXHJcbiAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhdHRyLmFyaWEtZXhwYW5kZWQ9XCJ7e2lzU2hvd0Ryb3Bkb3dufX1cIj5cclxuICAgIHt7YnV0dG9uVGV4dH19XHJcbiAgPC9hPlxyXG4gIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIiBbbmdDbGFzc109XCJ7J3Nob3cnOiBpc1Nob3dEcm9wZG93bn1cIiBhcmlhLWxhYmVsbGVkYnk9XCJkcm9wZG93bk1lbnVMaW5rXCI+XHJcbiAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zXCI+XHJcbiAgICAgIDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCJ7e2l0ZW0udXJsfX1cIiA+e3tpdGVtLnRleHR9fTwvYT5cclxuICAgICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duLWRpdmlkZXJcIiAqbmdJZj1cIml0ZW0uaXNEaXZpZGVyXCI+PC9kaXY+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcbmAsXHJcbiAgc3R5bGVzOiBbYGBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEcm9wZG93bkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQElucHV0KCkgaXRlbXM6IEl0ZW1bXSA9IFtdO1xyXG4gIEBJbnB1dCgpIGJ1dHRvblRleHQgPSAnWW91ciBCdXR0b24gVGV4dCc7XHJcbiAgQElucHV0KCkgaXNPcGVuO1xyXG4gIGlzU2hvd0Ryb3Bkb3duID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmlzU2hvd0Ryb3Bkb3duID0gdGhpcy5pc09wZW4gfHwgZmFsc2U7XHJcbiAgfVxyXG5cclxuICB0b2dnbGUoKSB7XHJcbiAgICB0aGlzLmlzU2hvd0Ryb3Bkb3duID0gIXRoaXMuaXNTaG93RHJvcGRvd247XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=