/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
export class CarouselComponent {
    constructor() {
        this.items = [];
        this.afterNext = new EventEmitter();
        this.afterPrev = new EventEmitter();
        this.width = '600px';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.activeIndex = 0;
        this.count = this.items.length;
    }
    /**
     * @return {?}
     */
    next() {
        (this.activeIndex < this.count - 1) ? this.activeIndex++ : this.activeIndex = 0;
        this.afterNext.emit({
            index: this.activeIndex,
            item: this.items[this.activeIndex]
        });
    }
    /**
     * @return {?}
     */
    prev() {
        (this.activeIndex >= 1) ? this.activeIndex-- : this.activeIndex = this.count - 1;
        this.afterPrev.emit({
            index: this.activeIndex,
            item: this.items[this.activeIndex]
        });
    }
    /**
     * @param {?} i
     * @return {?}
     */
    goTo(i) {
        this.activeIndex = i;
    }
}
CarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'ui-carousel',
                template: `<div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel" [ngStyle]="{width: width}">
  <ol class="carousel-indicators">
      <li data-target="#carouselExampleIndicators" attr.data-slide-to="{{i}}" *ngFor="let item of items; let i=index;"
          [ngClass]="{'active':i == activeIndex}" (click)="goTo(i)">
      </li>
  </ol>
  <div class="carousel-inner">
    <div class="carousel-item" *ngFor="let item of items; let i=index;" [ngClass]="{'active':i == activeIndex}">
      <img src="{{item.src}}" alt="{{item.alt}}">
      <div class="carousel-caption d-none d-md-block">
        <h5>{{item.alt}}</h5>
        <p>{{item.alt}}</p>
      </div>
    </div>
  </div>
  <a class="carousel-control-prev" (click)="prev()" role="button" data-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="sr-only">Previous</span>
  </a>
  <a class="carousel-control-next" (click)="next()" role="button" data-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="sr-only">Next</span>
  </a>
</div>
`,
                styles: [``]
            },] },
];
CarouselComponent.ctorParameters = () => [];
CarouselComponent.propDecorators = {
    items: [{ type: Input }],
    afterNext: [{ type: Output }],
    afterPrev: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CarouselComponent.prototype.items;
    /** @type {?} */
    CarouselComponent.prototype.afterNext;
    /** @type {?} */
    CarouselComponent.prototype.afterPrev;
    /** @type {?} */
    CarouselComponent.prototype.activeIndex;
    /** @type {?} */
    CarouselComponent.prototype.count;
    /** @type {?} */
    CarouselComponent.prototype.width;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctdWlraXQvIiwic291cmNlcyI6WyJsaWIvY2Fyb3VzZWwvY2Fyb3VzZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBK0I3RSxNQUFNO0lBU0o7UUFQUyxVQUFLLEdBQW1DLEVBQUUsQ0FBQztRQUMxQyxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMvQixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUd6QyxVQUFLLEdBQUcsT0FBTyxDQUFDO0lBR2hCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsSUFBSTtRQUNGLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ2xCLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVztZQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ25DLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxJQUFJO1FBQ0YsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDbkMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxJQUFJLENBQUMsQ0FBUztRQUNaLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7OztZQWhFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBd0JYO2dCQUNDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUNiOzs7O29CQUdFLEtBQUs7d0JBQ0wsTUFBTTt3QkFDTixNQUFNOzs7O0lBRlAsa0NBQW9EOztJQUNwRCxzQ0FBeUM7O0lBQ3pDLHNDQUF5Qzs7SUFDekMsd0NBQW9COztJQUNwQixrQ0FBYzs7SUFDZCxrQ0FBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd1aS1jYXJvdXNlbCcsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2IGlkPVwiY2Fyb3VzZWxFeGFtcGxlSW5kaWNhdG9yc1wiIGNsYXNzPVwiY2Fyb3VzZWwgc2xpZGVcIiBkYXRhLXJpZGU9XCJjYXJvdXNlbFwiIFtuZ1N0eWxlXT1cInt3aWR0aDogd2lkdGh9XCI+XHJcbiAgPG9sIGNsYXNzPVwiY2Fyb3VzZWwtaW5kaWNhdG9yc1wiPlxyXG4gICAgICA8bGkgZGF0YS10YXJnZXQ9XCIjY2Fyb3VzZWxFeGFtcGxlSW5kaWNhdG9yc1wiIGF0dHIuZGF0YS1zbGlkZS10bz1cInt7aX19XCIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXM7IGxldCBpPWluZGV4O1wiXHJcbiAgICAgICAgICBbbmdDbGFzc109XCJ7J2FjdGl2ZSc6aSA9PSBhY3RpdmVJbmRleH1cIiAoY2xpY2spPVwiZ29UbyhpKVwiPlxyXG4gICAgICA8L2xpPlxyXG4gIDwvb2w+XHJcbiAgPGRpdiBjbGFzcz1cImNhcm91c2VsLWlubmVyXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY2Fyb3VzZWwtaXRlbVwiICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zOyBsZXQgaT1pbmRleDtcIiBbbmdDbGFzc109XCJ7J2FjdGl2ZSc6aSA9PSBhY3RpdmVJbmRleH1cIj5cclxuICAgICAgPGltZyBzcmM9XCJ7e2l0ZW0uc3JjfX1cIiBhbHQ9XCJ7e2l0ZW0uYWx0fX1cIj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsLWNhcHRpb24gZC1ub25lIGQtbWQtYmxvY2tcIj5cclxuICAgICAgICA8aDU+e3tpdGVtLmFsdH19PC9oNT5cclxuICAgICAgICA8cD57e2l0ZW0uYWx0fX08L3A+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbiAgPGEgY2xhc3M9XCJjYXJvdXNlbC1jb250cm9sLXByZXZcIiAoY2xpY2spPVwicHJldigpXCIgcm9sZT1cImJ1dHRvblwiIGRhdGEtc2xpZGU9XCJwcmV2XCI+XHJcbiAgICA8c3BhbiBjbGFzcz1cImNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+UHJldmlvdXM8L3NwYW4+XHJcbiAgPC9hPlxyXG4gIDxhIGNsYXNzPVwiY2Fyb3VzZWwtY29udHJvbC1uZXh0XCIgKGNsaWNrKT1cIm5leHQoKVwiIHJvbGU9XCJidXR0b25cIiBkYXRhLXNsaWRlPVwibmV4dFwiPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJjYXJvdXNlbC1jb250cm9sLW5leHQtaWNvblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj5cclxuICAgIDxzcGFuIGNsYXNzPVwic3Itb25seVwiPk5leHQ8L3NwYW4+XHJcbiAgPC9hPlxyXG48L2Rpdj5cclxuYCxcclxuICBzdHlsZXM6IFtgYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIENhcm91c2VsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQElucHV0KCkgaXRlbXM6IHsgc3JjOiBzdHJpbmcsIGFsdDogc3RyaW5nIH1bXSA9IFtdO1xyXG4gIEBPdXRwdXQoKSBhZnRlck5leHQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGFmdGVyUHJldiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBhY3RpdmVJbmRleDogbnVtYmVyO1xyXG4gIGNvdW50OiBudW1iZXI7XHJcbiAgd2lkdGggPSAnNjAwcHgnO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5hY3RpdmVJbmRleCA9IDA7XHJcbiAgICB0aGlzLmNvdW50ID0gdGhpcy5pdGVtcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBuZXh0KCkge1xyXG4gICAgKHRoaXMuYWN0aXZlSW5kZXggPCB0aGlzLmNvdW50IC0gMSkgPyB0aGlzLmFjdGl2ZUluZGV4KysgOiB0aGlzLmFjdGl2ZUluZGV4ID0gMDtcclxuICAgIHRoaXMuYWZ0ZXJOZXh0LmVtaXQoe1xyXG4gICAgICBpbmRleDogdGhpcy5hY3RpdmVJbmRleCxcclxuICAgICAgaXRlbTogdGhpcy5pdGVtc1t0aGlzLmFjdGl2ZUluZGV4XVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcmV2KCkge1xyXG4gICAgKHRoaXMuYWN0aXZlSW5kZXggPj0gMSkgPyB0aGlzLmFjdGl2ZUluZGV4LS0gOiB0aGlzLmFjdGl2ZUluZGV4ID0gdGhpcy5jb3VudCAtIDE7XHJcbiAgICB0aGlzLmFmdGVyUHJldi5lbWl0KHtcclxuICAgICAgaW5kZXg6IHRoaXMuYWN0aXZlSW5kZXgsXHJcbiAgICAgIGl0ZW06IHRoaXMuaXRlbXNbdGhpcy5hY3RpdmVJbmRleF1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ29UbyhpOiBudW1iZXIpIHtcclxuICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpO1xyXG4gIH1cclxufVxyXG4iXX0=