/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { PagingService } from '../service/paging.service';
export class PaginationComponent {
    /**
     * @param {?} _pgs
     */
    constructor(_pgs) {
        this._pgs = _pgs;
        this.size = 10;
        this.pageChange = new EventEmitter();
        this.pageNum = 1;
        this.displayNumbers = 5;
        this.lastPage = 5;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._pgs.size = this.size;
        this._pgs.totalCount = this.totalCount;
        this.pageCount = this._pgs.getListOfPage(this.totalCount);
        this.totalPages = Array(this.pageCount).fill(0).map((e, i) => i + 1);
        this.pages = this.totalPages.slice(0, 5);
        this.lastPage = this.pages[this.displayNumbers - 1];
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onPageChange(e) {
        console.log(e);
        this.pageNum = e;
        this.pageChange.emit({
            pageNum: e
        });
    }
    /**
     * @param {?=} isReverse
     * @return {?}
     */
    shiftBoundary(isReverse = false) {
        /** @type {?} */
        let startIndex = (isReverse) ? this.pageNum - this.displayNumbers : this.pageNum - 1;
        /** @type {?} */
        let lastIndex = (isReverse) ? this.pageNum : this.pageNum + this.displayNumbers - 1;
        this.pages = this.totalPages.slice(startIndex, lastIndex);
        this.lastPage = lastIndex;
    }
    /**
     * @return {?}
     */
    next() {
        this.pageNum++;
        if (this.pageNum > this.lastPage)
            this.shiftBoundary();
    }
    /**
     * @return {?}
     */
    prev() {
        this.pageNum--;
        if ((this.pageNum) % this.displayNumbers === 0) {
            this.shiftBoundary(true);
        }
    }
}
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'ui-pagination',
                template: `<div class="m-3">
  <nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
      <ng-container>

        <li class="page-item " [ngClass]="{'disabled':pageNum === 1}" (click)="prev()" [attr.disabled]="pageNum === 1">
          <a class="page-link" tabindex="-1">Previous </a>
        </li>

        <li class="page-item" (click)="onPageChange(page)" *ngFor="let page of pages; index as i; first as isFirst; last as isLast;">
          <a class="page-link" [ngClass]="{'active disabled':pageNum===page}">{{page}}</a>
        </li>

        <li class="page-item" *ngIf=" pageCount > displayNumbers && lastPage < pageCount" [ngClass]="{'disabled':pageNum===pages.length}" (click)="shiftBoundary()">
          <a class="page-link">...</a>
        </li>

        <li class="page-item" *ngIf="pageCount > displayNumbers && lastPage < pageCount" [ngClass]="{'disabled':pageNum===pageCount}" (click)="onPageChange(pageCount)">
          <a class="page-link"> {{pageCount}}</a>
        </li>

        <li class="page-item" [ngClass]="{'disabled':pageNum === pageCount}" [attr.disabled]="(pageNum === pageCount)?'disabled':''" (click)="next()">
          <a class="page-link"> Next</a>
        </li>
      </ng-container>
    </ul>
  </nav>
</div>

`,
                styles: [`.page-link:not([href]):not([tabindex]){position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#337ab7;background-color:#fff;border:1px solid #dee2e6}.page-link.active:not([href]):not([tabindex]){position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#fff;background-color:#337ab7;border:1px solid #337ab7}.disabled{pointer-events:none}`]
            },] },
];
PaginationComponent.ctorParameters = () => [
    { type: PagingService }
];
PaginationComponent.propDecorators = {
    totalCount: [{ type: Input }],
    size: [{ type: Input }],
    pageChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PaginationComponent.prototype.totalCount;
    /** @type {?} */
    PaginationComponent.prototype.size;
    /** @type {?} */
    PaginationComponent.prototype.pageChange;
    /** @type {?} */
    PaginationComponent.prototype.pageCount;
    /** @type {?} */
    PaginationComponent.prototype.pages;
    /** @type {?} */
    PaginationComponent.prototype.pageNum;
    /** @type {?} */
    PaginationComponent.prototype.totalPages;
    /** @type {?} */
    PaginationComponent.prototype.displayNumbers;
    /** @type {?} */
    PaginationComponent.prototype.lastPage;
    /**
     * @type {?}
     * @private
     */
    PaginationComponent.prototype._pgs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy11aWtpdC8iLCJzb3VyY2VzIjpbImxpYi9kYXRhdGFibGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFvQ3hELE1BQU07Ozs7SUFZSixZQUFvQixJQUFtQjtRQUFuQixTQUFJLEdBQUosSUFBSSxDQUFlO1FBVjlCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVCxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUkxQyxZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBRXBCLG1CQUFjLEdBQVcsQ0FBQyxDQUFDO1FBQzNCLGFBQVEsR0FBVyxDQUFDLENBQUM7SUFHckIsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsQ0FBQztRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztZQUNuQixPQUFPLEVBQUUsQ0FBQztTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLOztZQUN6QixVQUFVLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFFLENBQUM7O1lBQy9FLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLEdBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6RCxDQUFDOzs7O0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLENBQUM7SUFDSCxDQUFDOzs7WUFuRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNkJYO2dCQUNDLE1BQU0sRUFBRSxDQUFDLDZaQUE2WixDQUFDO2FBQ3hhOzs7WUFuQ08sYUFBYTs7O3lCQXFDbEIsS0FBSzttQkFDTCxLQUFLO3lCQUNMLE1BQU07Ozs7SUFGUCx5Q0FBNEI7O0lBQzVCLG1DQUFtQjs7SUFDbkIseUNBQTBDOztJQUUxQyx3Q0FBa0I7O0lBQ2xCLG9DQUFhOztJQUNiLHNDQUFvQjs7SUFDcEIseUNBQWtCOztJQUNsQiw2Q0FBMkI7O0lBQzNCLHVDQUFxQjs7Ozs7SUFFVCxtQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1BhZ2luZ1NlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2UvcGFnaW5nLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd1aS1wYWdpbmF0aW9uJyxcclxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJtLTNcIj5cclxuICA8bmF2IGFyaWEtbGFiZWw9XCJQYWdlIG5hdmlnYXRpb24gZXhhbXBsZVwiPlxyXG4gICAgPHVsIGNsYXNzPVwicGFnaW5hdGlvbiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XHJcbiAgICAgIDxuZy1jb250YWluZXI+XHJcblxyXG4gICAgICAgIDxsaSBjbGFzcz1cInBhZ2UtaXRlbSBcIiBbbmdDbGFzc109XCJ7J2Rpc2FibGVkJzpwYWdlTnVtID09PSAxfVwiIChjbGljayk9XCJwcmV2KClcIiBbYXR0ci5kaXNhYmxlZF09XCJwYWdlTnVtID09PSAxXCI+XHJcbiAgICAgICAgICA8YSBjbGFzcz1cInBhZ2UtbGlua1wiIHRhYmluZGV4PVwiLTFcIj5QcmV2aW91cyA8L2E+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpIGNsYXNzPVwicGFnZS1pdGVtXCIgKGNsaWNrKT1cIm9uUGFnZUNoYW5nZShwYWdlKVwiICpuZ0Zvcj1cImxldCBwYWdlIG9mIHBhZ2VzOyBpbmRleCBhcyBpOyBmaXJzdCBhcyBpc0ZpcnN0OyBsYXN0IGFzIGlzTGFzdDtcIj5cclxuICAgICAgICAgIDxhIGNsYXNzPVwicGFnZS1saW5rXCIgW25nQ2xhc3NdPVwieydhY3RpdmUgZGlzYWJsZWQnOnBhZ2VOdW09PT1wYWdlfVwiPnt7cGFnZX19PC9hPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaSBjbGFzcz1cInBhZ2UtaXRlbVwiICpuZ0lmPVwiIHBhZ2VDb3VudCA+IGRpc3BsYXlOdW1iZXJzICYmIGxhc3RQYWdlIDwgcGFnZUNvdW50XCIgW25nQ2xhc3NdPVwieydkaXNhYmxlZCc6cGFnZU51bT09PXBhZ2VzLmxlbmd0aH1cIiAoY2xpY2spPVwic2hpZnRCb3VuZGFyeSgpXCI+XHJcbiAgICAgICAgICA8YSBjbGFzcz1cInBhZ2UtbGlua1wiPi4uLjwvYT5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIiAqbmdJZj1cInBhZ2VDb3VudCA+IGRpc3BsYXlOdW1iZXJzICYmIGxhc3RQYWdlIDwgcGFnZUNvdW50XCIgW25nQ2xhc3NdPVwieydkaXNhYmxlZCc6cGFnZU51bT09PXBhZ2VDb3VudH1cIiAoY2xpY2spPVwib25QYWdlQ2hhbmdlKHBhZ2VDb3VudClcIj5cclxuICAgICAgICAgIDxhIGNsYXNzPVwicGFnZS1saW5rXCI+IHt7cGFnZUNvdW50fX08L2E+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpIGNsYXNzPVwicGFnZS1pdGVtXCIgW25nQ2xhc3NdPVwieydkaXNhYmxlZCc6cGFnZU51bSA9PT0gcGFnZUNvdW50fVwiIFthdHRyLmRpc2FibGVkXT1cIihwYWdlTnVtID09PSBwYWdlQ291bnQpPydkaXNhYmxlZCc6JydcIiAoY2xpY2spPVwibmV4dCgpXCI+XHJcbiAgICAgICAgICA8YSBjbGFzcz1cInBhZ2UtbGlua1wiPiBOZXh0PC9hPlxyXG4gICAgICAgIDwvbGk+XHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPC91bD5cclxuICA8L25hdj5cclxuPC9kaXY+XHJcblxyXG5gLFxyXG4gIHN0eWxlczogW2AucGFnZS1saW5rOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKXtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6LjVyZW0gLjc1cmVtO21hcmdpbi1sZWZ0Oi0xcHg7bGluZS1oZWlnaHQ6MS4yNTtjb2xvcjojMzM3YWI3O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNkZWUyZTZ9LnBhZ2UtbGluay5hY3RpdmU6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pe3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzouNXJlbSAuNzVyZW07bWFyZ2luLWxlZnQ6LTFweDtsaW5lLWhlaWdodDoxLjI1O2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMzM3YWI3O2JvcmRlcjoxcHggc29saWQgIzMzN2FiN30uZGlzYWJsZWR7cG9pbnRlci1ldmVudHM6bm9uZX1gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUGFnaW5hdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQElucHV0KCkgdG90YWxDb3VudDogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHNpemUgPSAxMDtcclxuICBAT3V0cHV0KCkgcGFnZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgcGFnZUNvdW50OiBudW1iZXI7XHJcbiAgcGFnZXM6IGFueVtdO1xyXG4gIHBhZ2VOdW06IG51bWJlciA9IDE7XHJcbiAgdG90YWxQYWdlczogYW55W107XHJcbiAgZGlzcGxheU51bWJlcnM6IG51bWJlciA9IDU7XHJcbiAgbGFzdFBhZ2U6IG51bWJlciA9IDU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3BnczogUGFnaW5nU2VydmljZSkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLl9wZ3Muc2l6ZSA9IHRoaXMuc2l6ZTtcclxuICAgIHRoaXMuX3Bncy50b3RhbENvdW50ID0gdGhpcy50b3RhbENvdW50O1xyXG4gICAgdGhpcy5wYWdlQ291bnQgPSB0aGlzLl9wZ3MuZ2V0TGlzdE9mUGFnZSh0aGlzLnRvdGFsQ291bnQpO1xyXG4gICAgdGhpcy50b3RhbFBhZ2VzID0gQXJyYXkodGhpcy5wYWdlQ291bnQpLmZpbGwoMCkubWFwKChlLCBpKSA9PiBpICsgMSk7XHJcbiAgICB0aGlzLnBhZ2VzID0gdGhpcy50b3RhbFBhZ2VzLnNsaWNlKDAsIDUpO1xyXG4gICAgdGhpcy5sYXN0UGFnZSA9IHRoaXMucGFnZXNbdGhpcy5kaXNwbGF5TnVtYmVycyAtIDFdO1xyXG4gIH1cclxuXHJcbiAgb25QYWdlQ2hhbmdlKGUpIHtcclxuICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgdGhpcy5wYWdlTnVtID0gZTtcclxuICAgIHRoaXMucGFnZUNoYW5nZS5lbWl0KHtcclxuICAgICAgcGFnZU51bTogZVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzaGlmdEJvdW5kYXJ5KGlzUmV2ZXJzZSA9IGZhbHNlKSB7XHJcbiAgICBsZXQgc3RhcnRJbmRleCA9IChpc1JldmVyc2UpID8gdGhpcy5wYWdlTnVtIC0gdGhpcy5kaXNwbGF5TnVtYmVycyA6IHRoaXMucGFnZU51bSAtMTtcclxuICAgIGxldCBsYXN0SW5kZXggPSAoaXNSZXZlcnNlKSA/IHRoaXMucGFnZU51bSA6IHRoaXMucGFnZU51bSArIHRoaXMuZGlzcGxheU51bWJlcnMtMTtcclxuICAgIHRoaXMucGFnZXMgPSB0aGlzLnRvdGFsUGFnZXMuc2xpY2Uoc3RhcnRJbmRleCwgbGFzdEluZGV4KTtcclxuICAgIHRoaXMubGFzdFBhZ2UgPSBsYXN0SW5kZXg7XHJcbiAgfVxyXG5cclxuICBuZXh0KCkge1xyXG4gICAgdGhpcy5wYWdlTnVtKys7XHJcbiAgICBpZiAodGhpcy5wYWdlTnVtID4gdGhpcy5sYXN0UGFnZSkgdGhpcy5zaGlmdEJvdW5kYXJ5KCk7XHJcbiAgfVxyXG5cclxuICBwcmV2KCkge1xyXG4gICAgdGhpcy5wYWdlTnVtLS07XHJcbiAgICBpZiAoKHRoaXMucGFnZU51bSkgJSB0aGlzLmRpc3BsYXlOdW1iZXJzID09PSAwKSB7XHJcbiAgICAgIHRoaXMuc2hpZnRCb3VuZGFyeSh0cnVlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19