/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DatatableService } from './service/datatable.service';
export class DatatableComponent {
    /**
     * @param {?} _dts
     */
    constructor(_dts) {
        this._dts = _dts;
        this.pageChange = new EventEmitter();
        this.sorted = new EventEmitter();
        this.size = 6;
        this.search = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.page = this._dts.getPageData(this.rows, this.size, 1);
        console.log(this.page);
        this.resultCount = this.rows.length;
    }
    /**
     * @param {?} col
     * @return {?}
     */
    getColumnClass(col) {
        /** @type {?} */
        let className = ' ui-dt-cell ';
        if (col.className) {
            className += col.className + ' ';
        }
        if (col.sortable) {
            className += ' sortable';
        }
        return className;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onPageChange(e) {
        this.page = this._dts.getPageData(this.rows, this.size, e.pageNum);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    sort(item) {
        this.page.rows.sort(this.dynamicSort(item.field));
    }
    /**
     * @param {?} property
     * @return {?}
     */
    dynamicSort(property) {
        /** @type {?} */
        var sortOrder = 1;
        if (property[0] === '-') {
            sortOrder = -1;
            property = property.substr(1);
        }
        return function (a, b) {
            if (sortOrder === -1) {
                return b[property].toString().localeCompare(a[property]);
            }
            else {
                return a[property].toString().localeCompare(b[property]);
            }
        };
    }
    /**
     * @param {?} event
     * @param {?} field
     * @param {?} val
     * @return {?}
     */
    filter(event, field, val) {
        if (val.toString().length) {
            if (event.keyCode === 13 || event.which === 13) {
                this.search = {};
                this.search[field] = val;
                console.log(field, this.search, this.rows);
                /** @type {?} */
                const rows = [];
                this.rows.forEach((item) => {
                    if (item[field].toString().toLowerCase().indexOf(val.toString().toLowerCase()) !== -1) {
                        rows.push(item);
                    }
                });
                this.resultCount = rows.length;
                this.page = this._dts.getPageData(rows, this.size, 1);
            }
        }
        else {
            this.resultCount = this.rows.length;
            this.page = this._dts.getPageData(this.rows, this.size, 1);
        }
    }
}
DatatableComponent.decorators = [
    { type: Component, args: [{
                selector: 'ui-datatable',
                template: `<div class="ui-dt-table">
  <div class="ui-dt-thead row">
    <div *ngFor="let col of columns" [ngClass]="getColumnClass(col)"  >
      {{col.label}}
      <i class="fas fa-sort-amount-up" (click)="sort(col)"></i>
    </div>
  </div>
  <div class="ui-dt-thead row">
    <div *ngFor="let col of columns" [ngClass]="getColumnClass(col)"  >
        <input type="text" class="form-control form-control-sm"
               [name]="col.field"
               [ngModel]="search[col.field]"
               (keyup)="filter($event, col.field, $event.target.value)"
        >
    </div>
  </div>
  <div class="ui-dt-tbody">
    <div *ngFor="let row of page.rows;let i=index;" class="row ui-dt-row">
      <div [attr.class]="col.className +' ui-dt-cell'" *ngFor="let col of columns;let k=index;">
         {{row[col.field]}}
      </div>
    </div>
  </div>
</div>
<ui-pagination
  [size]="size"
  [totalCount]="resultCount"
  (pageChange)="onPageChange($event)">
</ui-pagination>

`,
                styles: [`.ui-dt-thead{border-bottom:1px solid #999}.ui-dt-thead .ui-dt-cell{font-weight:500}.ui-dt-row{border-bottom:1px solid #999}.ui-dt-cell{-ms-word-break:break-word;word-break:break-word;border-left:1px solid #ddd;padding:5px}.ui-dt-row .ui-dt-cell:last-child{border-right:1px solid #ddd}`]
            },] },
];
DatatableComponent.ctorParameters = () => [
    { type: DatatableService }
];
DatatableComponent.propDecorators = {
    rows: [{ type: Input }],
    columns: [{ type: Input }],
    pageChange: [{ type: Output }],
    sorted: [{ type: Output }],
    size: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DatatableComponent.prototype.rows;
    /** @type {?} */
    DatatableComponent.prototype.columns;
    /** @type {?} */
    DatatableComponent.prototype.pageChange;
    /** @type {?} */
    DatatableComponent.prototype.sorted;
    /** @type {?} */
    DatatableComponent.prototype.size;
    /** @type {?} */
    DatatableComponent.prototype.page;
    /** @type {?} */
    DatatableComponent.prototype.search;
    /** @type {?} */
    DatatableComponent.prototype.resultCount;
    /**
     * @type {?}
     * @private
     */
    DatatableComponent.prototype._dts;
}
//# sourceMappingURL=data:application/json;base64,