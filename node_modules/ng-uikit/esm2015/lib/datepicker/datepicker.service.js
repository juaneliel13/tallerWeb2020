/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DefaultLocaleMonths, DefaultLocaleMonthsShort, DefaultLocaleWeekdays, DefaultLocaleWeekdaysShort } from './datepicker.interface';
import * as i0 from "@angular/core";
export class DatepickerService {
    constructor() {
    }
    /**
     * @return {?}
     */
    get dateObj() {
        return this._dateObj;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dateObj(value) {
        this._dateObj = value;
    }
    /**
     * @return {?}
     */
    getDatesOfMonth() {
        /** @type {?} */
        const d = this.dateObj;
        /** @type {?} */
        const y = d.getFullYear();
        /** @type {?} */
        const m = d.getMonth();
        /** @type {?} */
        const f = new Date(y, m, 1);
        /** @type {?} */
        const l = new Date(y, m + 1, 0);
        /** @type {?} */
        const weekArr = new Array(7);
        /** @type {?} */
        const days = [
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null]
        ];
        console.log(l.getDate());
        /** @type {?} */
        let c = f.getDay();
        /** @type {?} */
        let row = 0;
        for (let i = 1; i <= l.getDate(); i++) {
            days[row][c] = (i <= 9) ? '0' + i : i + '';
            c++;
            if (c === 7) {
                row++;
                c = 0;
            }
        }
        console.log(row, days);
        return days;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @param {?} hours
     * @param {?} minutes
     * @param {?} seconds
     * @return {?}
     */
    getDateJsonObj(year, month, day, hours, minutes, seconds) {
        this.dateObj = new Date(year, month, day, hours, minutes, seconds);
        /** @type {?} */
        const d = this.dateObj;
        /** @type {?} */
        const date = (d.getDate() <= 9) ? '0' + d.getDate() : d.getDate() + '';
        /** @type {?} */
        const monthNumeric = (d.getMonth() <= 9) ? '0' + d.getMonth() : d.getMonth() + '';
        return {
            day: d.getDay(),
            dayString: DefaultLocaleWeekdays[d.getDay()],
            dayStringShort: DefaultLocaleWeekdaysShort[d.getDay()],
            date: date,
            month: monthNumeric,
            monthString: DefaultLocaleMonths[d.getUTCMonth()],
            monthStringShort: DefaultLocaleMonthsShort[d.getUTCMonth()],
            time: d.getTime().toString(),
            hours: d.getHours().toString(),
            minutes: d.getMinutes().toString(),
            seconds: d.getSeconds().toString(),
            year: d.getFullYear().toString(),
            UTCString: d.toUTCString(),
            numericDate: d.getFullYear() + '-' + monthNumeric + '-' + date + '-' + d.getHours() + '-' + d.getSeconds(),
            formatDate: this.getFormatDate(d)
        };
    }
    /**
     * @param {?} format
     * @return {?}
     */
    setFormat(format) {
        this.format = format;
    }
    /**
     * @private
     * @param {?} d
     * @return {?}
     */
    getFormatDate(d) {
        /** @type {?} */
        let dateStr = this.format;
        console.log(d.getFullYear());
        dateStr = dateStr.replace('yyyy', d.getFullYear());
        dateStr = dateStr.replace('mm', this.getMonthString(d));
        dateStr = dateStr.replace('dd', d.getDate());
        console.log(dateStr);
        return dateStr;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getMonthString(date) {
        console.log(date.getMonth());
        /** @type {?} */
        var month = date.getMonth() + 1;
        return month < 10 ? '0' + month : '' + month; // ('' + month) for string result
    }
}
DatepickerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
DatepickerService.ctorParameters = () => [];
/** @nocollapse */ DatepickerService.ngInjectableDef = i0.defineInjectable({ factory: function DatepickerService_Factory() { return new DatepickerService(); }, token: DatepickerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatepickerService.prototype.format;
    /**
     * @type {?}
     * @private
     */
    DatepickerService.prototype._dateObj;
}
//# sourceMappingURL=data:application/json;base64,