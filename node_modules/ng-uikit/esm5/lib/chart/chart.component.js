/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
var ChartComponent = /** @class */ (function () {
    function ChartComponent(el) {
        this.el = el;
        this.width = '400px';
        this.height = '400px';
        this.clickChart = new EventEmitter();
        this.responsive = true;
    }
    /**
     * @return {?}
     */
    ChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ctx = this.el.nativeElement.children[0].children[0].getContext('2d');
        /** @type {?} */
        var _that = this;
        Chart.plugins.register({
            afterDatasetsDraw: function (chartInstance, easing) {
                // To only draw at the end of animation, check for easing === 1
                /** @type {?} */
                var ctx = chartInstance.chart.ctx;
                chartInstance.data.datasets.forEach(function (dataset, i) {
                    /** @type {?} */
                    var meta = chartInstance.getDatasetMeta(i);
                    if (!meta.hidden) {
                        meta.data.forEach(function (element, index) {
                            // Draw the text in black, with the specified font
                            ctx.fillStyle = 'rgb(0, 0, 0)';
                            /** @type {?} */
                            var fontSize = 16;
                            /** @type {?} */
                            var fontStyle = 'normal';
                            /** @type {?} */
                            var fontFamily = 'Helvetica Neue';
                            ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily);
                            // Just naively convert to string for now
                            /** @type {?} */
                            var dataString = dataset.data[index].toString();
                            // Make sure alignment settings are correct
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';
                            /** @type {?} */
                            var padding = 5;
                            /** @type {?} */
                            var position = element.tooltipPosition();
                            ctx.fillText(dataString, position.x, position.y - (fontSize / 2) - padding);
                        });
                    }
                });
            }
        });
        this.chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'bar',
            // The data for our dataset
            data: this.data,
            maintainAspectRatio: false,
            responsive: true,
            // Configuration options go here
            options: {
                onClick: function (e) {
                    /** @type {?} */
                    var activePoints = _that.chart.getElementsAtEvent(e);
                    /** @type {?} */
                    var index = activePoints[0]._index;
                    _that.clickChart.emit({ y: this.data.datasets[0].data[index], x: this.data.labels[index] });
                },
                title: {
                    display: true,
                    text: 'My Title',
                    fontSize: 16
                },
                legend: {
                    enabled: false,
                },
                scales: {
                    yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                },
                layout: {
                    padding: {
                        left: 50,
                        right: 0,
                        top: 0,
                        bottom: 0
                    }
                }
            },
            onClick: function (e) {
                /** @type {?} */
                var activePoints = _that.chart.getElementsAtEvent(e);
                /** @type {?} */
                var selectedIndex = activePoints[0]._index;
                console.log(this.data.datasets[0].data[selectedIndex]);
            }
        });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ChartComponent.prototype.onCanvasClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // if(this.chart) {
        //   let element = this.chart.getElementAtEvent(event);
        //   let dataset = this.chart.getDatasetAtEvent(event);
        //   if(element && element[0] && dataset) {
        //     this.clickChart.emit({originalEvent: event, element: element[0], dataset: dataset});
        //   }
        // }
    };
    ChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ui-chart',
                    template: "<div style=\"position:relative\" [style.width]=\"responsive && !width ? null : width\" [style.height]=\"responsive && !height ? null : height\">\n  <canvas [attr.width]=\"responsive && !width ? null : width\" [attr.height]=\"responsive && !height ? null : height\" (click)=\"onCanvasClick($event)\"></canvas>\n</div>\n",
                    styles: [""]
                },] },
    ];
    ChartComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ChartComponent.propDecorators = {
        data: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        clickChart: [{ type: Output }]
    };
    return ChartComponent;
}());
export { ChartComponent };
if (false) {
    /** @type {?} */
    ChartComponent.prototype.data;
    /** @type {?} */
    ChartComponent.prototype.width;
    /** @type {?} */
    ChartComponent.prototype.height;
    /** @type {?} */
    ChartComponent.prototype.clickChart;
    /** @type {?} */
    ChartComponent.prototype.chart;
    /**
     * @type {?}
     * @private
     */
    ChartComponent.prototype.options;
    /** @type {?} */
    ChartComponent.prototype.responsive;
    /** @type {?} */
    ChartComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,