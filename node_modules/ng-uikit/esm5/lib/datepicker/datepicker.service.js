/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DefaultLocaleMonths, DefaultLocaleMonthsShort, DefaultLocaleWeekdays, DefaultLocaleWeekdaysShort } from './datepicker.interface';
import * as i0 from "@angular/core";
var DatepickerService = /** @class */ (function () {
    function DatepickerService() {
    }
    Object.defineProperty(DatepickerService.prototype, "dateObj", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateObj;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dateObj = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatepickerService.prototype.getDatesOfMonth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var d = this.dateObj;
        /** @type {?} */
        var y = d.getFullYear();
        /** @type {?} */
        var m = d.getMonth();
        /** @type {?} */
        var f = new Date(y, m, 1);
        /** @type {?} */
        var l = new Date(y, m + 1, 0);
        /** @type {?} */
        var weekArr = new Array(7);
        /** @type {?} */
        var days = [
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null]
        ];
        console.log(l.getDate());
        /** @type {?} */
        var c = f.getDay();
        /** @type {?} */
        var row = 0;
        for (var i = 1; i <= l.getDate(); i++) {
            days[row][c] = (i <= 9) ? '0' + i : i + '';
            c++;
            if (c === 7) {
                row++;
                c = 0;
            }
        }
        console.log(row, days);
        return days;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @param {?} hours
     * @param {?} minutes
     * @param {?} seconds
     * @return {?}
     */
    DatepickerService.prototype.getDateJsonObj = /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @param {?} hours
     * @param {?} minutes
     * @param {?} seconds
     * @return {?}
     */
    function (year, month, day, hours, minutes, seconds) {
        this.dateObj = new Date(year, month, day, hours, minutes, seconds);
        /** @type {?} */
        var d = this.dateObj;
        /** @type {?} */
        var date = (d.getDate() <= 9) ? '0' + d.getDate() : d.getDate() + '';
        /** @type {?} */
        var monthNumeric = (d.getMonth() <= 9) ? '0' + d.getMonth() : d.getMonth() + '';
        return {
            day: d.getDay(),
            dayString: DefaultLocaleWeekdays[d.getDay()],
            dayStringShort: DefaultLocaleWeekdaysShort[d.getDay()],
            date: date,
            month: monthNumeric,
            monthString: DefaultLocaleMonths[d.getUTCMonth()],
            monthStringShort: DefaultLocaleMonthsShort[d.getUTCMonth()],
            time: d.getTime().toString(),
            hours: d.getHours().toString(),
            minutes: d.getMinutes().toString(),
            seconds: d.getSeconds().toString(),
            year: d.getFullYear().toString(),
            UTCString: d.toUTCString(),
            numericDate: d.getFullYear() + '-' + monthNumeric + '-' + date + '-' + d.getHours() + '-' + d.getSeconds(),
            formatDate: this.getFormatDate(d)
        };
    };
    /**
     * @param {?} format
     * @return {?}
     */
    DatepickerService.prototype.setFormat = /**
     * @param {?} format
     * @return {?}
     */
    function (format) {
        this.format = format;
    };
    /**
     * @private
     * @param {?} d
     * @return {?}
     */
    DatepickerService.prototype.getFormatDate = /**
     * @private
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var dateStr = this.format;
        console.log(d.getFullYear());
        dateStr = dateStr.replace('yyyy', d.getFullYear());
        dateStr = dateStr.replace('mm', this.getMonthString(d));
        dateStr = dateStr.replace('dd', d.getDate());
        console.log(dateStr);
        return dateStr;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatepickerService.prototype.getMonthString = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        console.log(date.getMonth());
        /** @type {?} */
        var month = date.getMonth() + 1;
        return month < 10 ? '0' + month : '' + month; // ('' + month) for string result
    };
    DatepickerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    DatepickerService.ctorParameters = function () { return []; };
    /** @nocollapse */ DatepickerService.ngInjectableDef = i0.defineInjectable({ factory: function DatepickerService_Factory() { return new DatepickerService(); }, token: DatepickerService, providedIn: "root" });
    return DatepickerService;
}());
export { DatepickerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatepickerService.prototype.format;
    /**
     * @type {?}
     * @private
     */
    DatepickerService.prototype._dateObj;
}
//# sourceMappingURL=data:application/json;base64,