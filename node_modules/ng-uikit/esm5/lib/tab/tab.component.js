/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { TabPanelComponent } from "./tab-panel/tab-panel.component";
var TabComponent = /** @class */ (function () {
    function TabComponent() {
        this.optionTabAfter = 3;
        this.isShowDropdown = false;
    }
    /**
     * @return {?}
     */
    TabComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TabComponent.prototype.toggleDropdown = /**
     * @return {?}
     */
    function () {
        this.isShowDropdown = !this.isShowDropdown;
    };
    /**
     * @param {?} i
     * @return {?}
     */
    TabComponent.prototype.toggle = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.tabPanels.forEach(function (tab) {
            tab.isOpen = (tab.index === i);
        });
    };
    /**
     * @return {?}
     */
    TabComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.tabs = [];
        this.optionTabs = [];
        /** @type {?} */
        var count = 0;
        this.tabPanels.map(function (tab) {
            /** @type {?} */
            var tabItem = {
                headerText: tab.header,
                index: tab.index,
                isOpen: !!tab
            };
            count++;
            _this.optionTabAfter = (_this.optionTabAfter >= _this.tabPanels.length) ? _this.tabPanels.length : _this.optionTabAfter;
            if (count <= _this.optionTabAfter) {
                _this.tabs.push(tabItem);
            }
            else {
                _this.optionTabs.push(tabItem);
            }
        });
        console.log(this.tabs, this.optionTabs);
    };
    TabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ui-tab',
                    template: "<ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n  <li class=\"nav-item\" *ngFor=\"let item of tabs;index as i\">\n    <a class=\"nav-link \"\n       [attr.id]=\"'tab'+item.index\"\n       data-toggle=\"tab\"\n       (click)=\"toggle(item.index)\"\n       role=\"tab\" aria-controls=\"home\"\n       [attr.aria-selected]=\"item.isOpen\"\n       [ngClass]=\"{'active':item.isOpen}\">\n      {{item.headerText}}\n    </a>\n  </li>\n  <li role=\"presentation\" class=\"dropdown\" *ngIf=\"optionTabs.length\" [ngClass]=\"{'show': isShowDropdown}\">\n    <a class=\"dropdown-toggle\" id=\"myTabDrop\" (click)=\"toggleDropdown()\" data-toggle=\"dropdown\" aria-controls=\"myTabDrop-contents\" attr.aria-expanded=\"{{isShowDropdown}}\">more\n      <span class=\"caret\"></span>\n    </a>\n    <ul class=\"dropdown-menu\" aria-labelledby=\"myTabDrop\" id=\"myTabDrop1-contents\" [ngClass]=\"{'show': isShowDropdown}\">\n      <li *ngFor=\"let item of optionTabs\">\n        <a [attr.id]=\"'tab'+item.index\"\n           data-toggle=\"tab\"\n           (click)=\"toggle(item.index)\"\n           role=\"tab\" aria-controls=\"home\"\n           [attr.aria-selected]=\"item.isOpen\"\n           [ngClass]=\"{'active':item.isOpen}\">\n          {{item.headerText}}</a>\n      </li>\n    </ul>\n  </li>\n</ul>\n<div class=\"tab-content\" id=\"myTabContent\">\n  <ng-content></ng-content>\n</div>\n",
                    styles: [""]
                },] },
    ];
    TabComponent.ctorParameters = function () { return []; };
    TabComponent.propDecorators = {
        optionTabAfter: [{ type: Input }],
        tabPanels: [{ type: ContentChildren, args: [TabPanelComponent,] }]
    };
    return TabComponent;
}());
export { TabComponent };
if (false) {
    /** @type {?} */
    TabComponent.prototype.optionTabAfter;
    /** @type {?} */
    TabComponent.prototype.tabs;
    /** @type {?} */
    TabComponent.prototype.optionTabs;
    /** @type {?} */
    TabComponent.prototype.tabPanels;
    /** @type {?} */
    TabComponent.prototype.isShowDropdown;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXVpa2l0LyIsInNvdXJjZXMiOlsibGliL3RhYi90YWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQW1CLFNBQVMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUVsRTtJQTZDRTtRQVBTLG1CQUFjLEdBQVcsQ0FBQyxDQUFDO1FBS3BDLG1CQUFjLEdBQVksS0FBSyxDQUFDO0lBR2hDLENBQUM7Ozs7SUFFRCwrQkFBUTs7O0lBQVI7SUFFQSxDQUFDOzs7O0lBRUQscUNBQWM7OztJQUFkO1FBQ0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0MsQ0FBQzs7Ozs7SUFFRCw2QkFBTTs7OztJQUFOLFVBQU8sQ0FBQztRQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztZQUN4QixHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCx5Q0FBa0I7OztJQUFsQjtRQUFBLGlCQW1CQztRQWxCQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFBOztZQUNoQixLQUFLLEdBQUcsQ0FBQztRQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRzs7Z0JBQ2QsT0FBTyxHQUFHO2dCQUNkLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTTtnQkFDdEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO2dCQUNoQixNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUc7YUFDZDtZQUNELEtBQUssRUFBRSxDQUFDO1lBQ1IsS0FBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLEtBQUksQ0FBQyxjQUFjLElBQUksS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUM7WUFDbkgsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN6QyxDQUFDOztnQkFqRkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxRQUFRO29CQUNsQixRQUFRLEVBQUUsbzNDQWdDWDtvQkFDQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7aUJBQ2I7Ozs7aUNBRUUsS0FBSzs0QkFHTCxlQUFlLFNBQUMsaUJBQWlCOztJQTJDcEMsbUJBQUM7Q0FBQSxBQXBGRCxJQW9GQztTQS9DWSxZQUFZOzs7SUFDdkIsc0NBQW9DOztJQUNwQyw0QkFBbUI7O0lBQ25CLGtDQUF5Qjs7SUFDekIsaUNBQTRFOztJQUU1RSxzQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgT25Jbml0LCBRdWVyeUxpc3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1RhYlBhbmVsQ29tcG9uZW50fSBmcm9tIFwiLi90YWItcGFuZWwvdGFiLXBhbmVsLmNvbXBvbmVudFwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd1aS10YWInLFxyXG4gIHRlbXBsYXRlOiBgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzXCIgaWQ9XCJteVRhYlwiIHJvbGU9XCJ0YWJsaXN0XCI+XHJcbiAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiAqbmdGb3I9XCJsZXQgaXRlbSBvZiB0YWJzO2luZGV4IGFzIGlcIj5cclxuICAgIDxhIGNsYXNzPVwibmF2LWxpbmsgXCJcclxuICAgICAgIFthdHRyLmlkXT1cIid0YWInK2l0ZW0uaW5kZXhcIlxyXG4gICAgICAgZGF0YS10b2dnbGU9XCJ0YWJcIlxyXG4gICAgICAgKGNsaWNrKT1cInRvZ2dsZShpdGVtLmluZGV4KVwiXHJcbiAgICAgICByb2xlPVwidGFiXCIgYXJpYS1jb250cm9scz1cImhvbWVcIlxyXG4gICAgICAgW2F0dHIuYXJpYS1zZWxlY3RlZF09XCJpdGVtLmlzT3BlblwiXHJcbiAgICAgICBbbmdDbGFzc109XCJ7J2FjdGl2ZSc6aXRlbS5pc09wZW59XCI+XHJcbiAgICAgIHt7aXRlbS5oZWFkZXJUZXh0fX1cclxuICAgIDwvYT5cclxuICA8L2xpPlxyXG4gIDxsaSByb2xlPVwicHJlc2VudGF0aW9uXCIgY2xhc3M9XCJkcm9wZG93blwiICpuZ0lmPVwib3B0aW9uVGFicy5sZW5ndGhcIiBbbmdDbGFzc109XCJ7J3Nob3cnOiBpc1Nob3dEcm9wZG93bn1cIj5cclxuICAgIDxhIGNsYXNzPVwiZHJvcGRvd24tdG9nZ2xlXCIgaWQ9XCJteVRhYkRyb3BcIiAoY2xpY2spPVwidG9nZ2xlRHJvcGRvd24oKVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWNvbnRyb2xzPVwibXlUYWJEcm9wLWNvbnRlbnRzXCIgYXR0ci5hcmlhLWV4cGFuZGVkPVwie3tpc1Nob3dEcm9wZG93bn19XCI+bW9yZVxyXG4gICAgICA8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPlxyXG4gICAgPC9hPlxyXG4gICAgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiIGFyaWEtbGFiZWxsZWRieT1cIm15VGFiRHJvcFwiIGlkPVwibXlUYWJEcm9wMS1jb250ZW50c1wiIFtuZ0NsYXNzXT1cInsnc2hvdyc6IGlzU2hvd0Ryb3Bkb3dufVwiPlxyXG4gICAgICA8bGkgKm5nRm9yPVwibGV0IGl0ZW0gb2Ygb3B0aW9uVGFic1wiPlxyXG4gICAgICAgIDxhIFthdHRyLmlkXT1cIid0YWInK2l0ZW0uaW5kZXhcIlxyXG4gICAgICAgICAgIGRhdGEtdG9nZ2xlPVwidGFiXCJcclxuICAgICAgICAgICAoY2xpY2spPVwidG9nZ2xlKGl0ZW0uaW5kZXgpXCJcclxuICAgICAgICAgICByb2xlPVwidGFiXCIgYXJpYS1jb250cm9scz1cImhvbWVcIlxyXG4gICAgICAgICAgIFthdHRyLmFyaWEtc2VsZWN0ZWRdPVwiaXRlbS5pc09wZW5cIlxyXG4gICAgICAgICAgIFtuZ0NsYXNzXT1cInsnYWN0aXZlJzppdGVtLmlzT3Blbn1cIj5cclxuICAgICAgICAgIHt7aXRlbS5oZWFkZXJUZXh0fX08L2E+XHJcbiAgICAgIDwvbGk+XHJcbiAgICA8L3VsPlxyXG4gIDwvbGk+XHJcbjwvdWw+XHJcbjxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiIGlkPVwibXlUYWJDb250ZW50XCI+XHJcbiAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG48L2Rpdj5cclxuYCxcclxuICBzdHlsZXM6IFtgYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFRhYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgQElucHV0KCkgb3B0aW9uVGFiQWZ0ZXI6IG51bWJlciA9IDM7XHJcbiAgcHVibGljIHRhYnM6IGFueVtdO1xyXG4gIHB1YmxpYyBvcHRpb25UYWJzOiBhbnlbXTtcclxuICBAQ29udGVudENoaWxkcmVuKFRhYlBhbmVsQ29tcG9uZW50KSB0YWJQYW5lbHM6IFF1ZXJ5TGlzdDxUYWJQYW5lbENvbXBvbmVudD47XHJcblxyXG4gIGlzU2hvd0Ryb3Bkb3duOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRHJvcGRvd24oKSB7XHJcbiAgICB0aGlzLmlzU2hvd0Ryb3Bkb3duID0gIXRoaXMuaXNTaG93RHJvcGRvd247XHJcbiAgfVxyXG5cclxuICB0b2dnbGUoaSkge1xyXG4gICAgdGhpcy50YWJQYW5lbHMuZm9yRWFjaCh0YWIgPT4ge1xyXG4gICAgICB0YWIuaXNPcGVuID0gKHRhYi5pbmRleCA9PT0gaSlcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy50YWJzID0gW107XHJcbiAgICB0aGlzLm9wdGlvblRhYnMgPSBbXVxyXG4gICAgbGV0IGNvdW50ID0gMDtcclxuICAgIHRoaXMudGFiUGFuZWxzLm1hcCh0YWIgPT4ge1xyXG4gICAgICBjb25zdCB0YWJJdGVtID0ge1xyXG4gICAgICAgIGhlYWRlclRleHQ6IHRhYi5oZWFkZXIsXHJcbiAgICAgICAgaW5kZXg6IHRhYi5pbmRleCxcclxuICAgICAgICBpc09wZW46ICEhdGFiXHJcbiAgICAgIH07XHJcbiAgICAgIGNvdW50Kys7XHJcbiAgICAgIHRoaXMub3B0aW9uVGFiQWZ0ZXIgPSAodGhpcy5vcHRpb25UYWJBZnRlciA+PSB0aGlzLnRhYlBhbmVscy5sZW5ndGgpID8gdGhpcy50YWJQYW5lbHMubGVuZ3RoIDogdGhpcy5vcHRpb25UYWJBZnRlcjtcclxuICAgICAgaWYgKGNvdW50IDw9IHRoaXMub3B0aW9uVGFiQWZ0ZXIpIHtcclxuICAgICAgICB0aGlzLnRhYnMucHVzaCh0YWJJdGVtKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLm9wdGlvblRhYnMucHVzaCh0YWJJdGVtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLnRhYnMsIHRoaXMub3B0aW9uVGFicylcclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=