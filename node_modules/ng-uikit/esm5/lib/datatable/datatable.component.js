/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DatatableService } from './service/datatable.service';
var DatatableComponent = /** @class */ (function () {
    function DatatableComponent(_dts) {
        this._dts = _dts;
        this.pageChange = new EventEmitter();
        this.sorted = new EventEmitter();
        this.size = 6;
        this.search = {};
    }
    /**
     * @return {?}
     */
    DatatableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.page = this._dts.getPageData(this.rows, this.size, 1);
        console.log(this.page);
        this.resultCount = this.rows.length;
    };
    /**
     * @param {?} col
     * @return {?}
     */
    DatatableComponent.prototype.getColumnClass = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        /** @type {?} */
        var className = ' ui-dt-cell ';
        if (col.className) {
            className += col.className + ' ';
        }
        if (col.sortable) {
            className += ' sortable';
        }
        return className;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DatatableComponent.prototype.onPageChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.page = this._dts.getPageData(this.rows, this.size, e.pageNum);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DatatableComponent.prototype.sort = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.page.rows.sort(this.dynamicSort(item.field));
    };
    /**
     * @param {?} property
     * @return {?}
     */
    DatatableComponent.prototype.dynamicSort = /**
     * @param {?} property
     * @return {?}
     */
    function (property) {
        /** @type {?} */
        var sortOrder = 1;
        if (property[0] === '-') {
            sortOrder = -1;
            property = property.substr(1);
        }
        return function (a, b) {
            if (sortOrder === -1) {
                return b[property].toString().localeCompare(a[property]);
            }
            else {
                return a[property].toString().localeCompare(b[property]);
            }
        };
    };
    /**
     * @param {?} event
     * @param {?} field
     * @param {?} val
     * @return {?}
     */
    DatatableComponent.prototype.filter = /**
     * @param {?} event
     * @param {?} field
     * @param {?} val
     * @return {?}
     */
    function (event, field, val) {
        if (val.toString().length) {
            if (event.keyCode === 13 || event.which === 13) {
                this.search = {};
                this.search[field] = val;
                console.log(field, this.search, this.rows);
                /** @type {?} */
                var rows_1 = [];
                this.rows.forEach(function (item) {
                    if (item[field].toString().toLowerCase().indexOf(val.toString().toLowerCase()) !== -1) {
                        rows_1.push(item);
                    }
                });
                this.resultCount = rows_1.length;
                this.page = this._dts.getPageData(rows_1, this.size, 1);
            }
        }
        else {
            this.resultCount = this.rows.length;
            this.page = this._dts.getPageData(this.rows, this.size, 1);
        }
    };
    DatatableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ui-datatable',
                    template: "<div class=\"ui-dt-table\">\n  <div class=\"ui-dt-thead row\">\n    <div *ngFor=\"let col of columns\" [ngClass]=\"getColumnClass(col)\"  >\n      {{col.label}}\n      <i class=\"fas fa-sort-amount-up\" (click)=\"sort(col)\"></i>\n    </div>\n  </div>\n  <div class=\"ui-dt-thead row\">\n    <div *ngFor=\"let col of columns\" [ngClass]=\"getColumnClass(col)\"  >\n        <input type=\"text\" class=\"form-control form-control-sm\"\n               [name]=\"col.field\"\n               [ngModel]=\"search[col.field]\"\n               (keyup)=\"filter($event, col.field, $event.target.value)\"\n        >\n    </div>\n  </div>\n  <div class=\"ui-dt-tbody\">\n    <div *ngFor=\"let row of page.rows;let i=index;\" class=\"row ui-dt-row\">\n      <div [attr.class]=\"col.className +' ui-dt-cell'\" *ngFor=\"let col of columns;let k=index;\">\n         {{row[col.field]}}\n      </div>\n    </div>\n  </div>\n</div>\n<ui-pagination\n  [size]=\"size\"\n  [totalCount]=\"resultCount\"\n  (pageChange)=\"onPageChange($event)\">\n</ui-pagination>\n\n",
                    styles: [".ui-dt-thead{border-bottom:1px solid #999}.ui-dt-thead .ui-dt-cell{font-weight:500}.ui-dt-row{border-bottom:1px solid #999}.ui-dt-cell{-ms-word-break:break-word;word-break:break-word;border-left:1px solid #ddd;padding:5px}.ui-dt-row .ui-dt-cell:last-child{border-right:1px solid #ddd}"]
                },] },
    ];
    DatatableComponent.ctorParameters = function () { return [
        { type: DatatableService }
    ]; };
    DatatableComponent.propDecorators = {
        rows: [{ type: Input }],
        columns: [{ type: Input }],
        pageChange: [{ type: Output }],
        sorted: [{ type: Output }],
        size: [{ type: Input }]
    };
    return DatatableComponent;
}());
export { DatatableComponent };
if (false) {
    /** @type {?} */
    DatatableComponent.prototype.rows;
    /** @type {?} */
    DatatableComponent.prototype.columns;
    /** @type {?} */
    DatatableComponent.prototype.pageChange;
    /** @type {?} */
    DatatableComponent.prototype.sorted;
    /** @type {?} */
    DatatableComponent.prototype.size;
    /** @type {?} */
    DatatableComponent.prototype.page;
    /** @type {?} */
    DatatableComponent.prototype.search;
    /** @type {?} */
    DatatableComponent.prototype.resultCount;
    /**
     * @type {?}
     * @private
     */
    DatatableComponent.prototype._dts;
}
//# sourceMappingURL=data:application/json;base64,