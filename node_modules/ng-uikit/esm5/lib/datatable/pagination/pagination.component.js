/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { PagingService } from '../service/paging.service';
var PaginationComponent = /** @class */ (function () {
    function PaginationComponent(_pgs) {
        this._pgs = _pgs;
        this.size = 10;
        this.pageChange = new EventEmitter();
        this.pageNum = 1;
        this.displayNumbers = 5;
        this.lastPage = 5;
    }
    /**
     * @return {?}
     */
    PaginationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._pgs.size = this.size;
        this._pgs.totalCount = this.totalCount;
        this.pageCount = this._pgs.getListOfPage(this.totalCount);
        this.totalPages = Array(this.pageCount).fill(0).map(function (e, i) { return i + 1; });
        this.pages = this.totalPages.slice(0, 5);
        this.lastPage = this.pages[this.displayNumbers - 1];
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PaginationComponent.prototype.onPageChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        console.log(e);
        this.pageNum = e;
        this.pageChange.emit({
            pageNum: e
        });
    };
    /**
     * @param {?=} isReverse
     * @return {?}
     */
    PaginationComponent.prototype.shiftBoundary = /**
     * @param {?=} isReverse
     * @return {?}
     */
    function (isReverse) {
        if (isReverse === void 0) { isReverse = false; }
        /** @type {?} */
        var startIndex = (isReverse) ? this.pageNum - this.displayNumbers : this.pageNum - 1;
        /** @type {?} */
        var lastIndex = (isReverse) ? this.pageNum : this.pageNum + this.displayNumbers - 1;
        this.pages = this.totalPages.slice(startIndex, lastIndex);
        this.lastPage = lastIndex;
    };
    /**
     * @return {?}
     */
    PaginationComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.pageNum++;
        if (this.pageNum > this.lastPage)
            this.shiftBoundary();
    };
    /**
     * @return {?}
     */
    PaginationComponent.prototype.prev = /**
     * @return {?}
     */
    function () {
        this.pageNum--;
        if ((this.pageNum) % this.displayNumbers === 0) {
            this.shiftBoundary(true);
        }
    };
    PaginationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ui-pagination',
                    template: "<div class=\"m-3\">\n  <nav aria-label=\"Page navigation example\">\n    <ul class=\"pagination justify-content-center\">\n      <ng-container>\n\n        <li class=\"page-item \" [ngClass]=\"{'disabled':pageNum === 1}\" (click)=\"prev()\" [attr.disabled]=\"pageNum === 1\">\n          <a class=\"page-link\" tabindex=\"-1\">Previous </a>\n        </li>\n\n        <li class=\"page-item\" (click)=\"onPageChange(page)\" *ngFor=\"let page of pages; index as i; first as isFirst; last as isLast;\">\n          <a class=\"page-link\" [ngClass]=\"{'active disabled':pageNum===page}\">{{page}}</a>\n        </li>\n\n        <li class=\"page-item\" *ngIf=\" pageCount > displayNumbers && lastPage < pageCount\" [ngClass]=\"{'disabled':pageNum===pages.length}\" (click)=\"shiftBoundary()\">\n          <a class=\"page-link\">...</a>\n        </li>\n\n        <li class=\"page-item\" *ngIf=\"pageCount > displayNumbers && lastPage < pageCount\" [ngClass]=\"{'disabled':pageNum===pageCount}\" (click)=\"onPageChange(pageCount)\">\n          <a class=\"page-link\"> {{pageCount}}</a>\n        </li>\n\n        <li class=\"page-item\" [ngClass]=\"{'disabled':pageNum === pageCount}\" [attr.disabled]=\"(pageNum === pageCount)?'disabled':''\" (click)=\"next()\">\n          <a class=\"page-link\"> Next</a>\n        </li>\n      </ng-container>\n    </ul>\n  </nav>\n</div>\n\n",
                    styles: [".page-link:not([href]):not([tabindex]){position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#337ab7;background-color:#fff;border:1px solid #dee2e6}.page-link.active:not([href]):not([tabindex]){position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#fff;background-color:#337ab7;border:1px solid #337ab7}.disabled{pointer-events:none}"]
                },] },
    ];
    PaginationComponent.ctorParameters = function () { return [
        { type: PagingService }
    ]; };
    PaginationComponent.propDecorators = {
        totalCount: [{ type: Input }],
        size: [{ type: Input }],
        pageChange: [{ type: Output }]
    };
    return PaginationComponent;
}());
export { PaginationComponent };
if (false) {
    /** @type {?} */
    PaginationComponent.prototype.totalCount;
    /** @type {?} */
    PaginationComponent.prototype.size;
    /** @type {?} */
    PaginationComponent.prototype.pageChange;
    /** @type {?} */
    PaginationComponent.prototype.pageCount;
    /** @type {?} */
    PaginationComponent.prototype.pages;
    /** @type {?} */
    PaginationComponent.prototype.pageNum;
    /** @type {?} */
    PaginationComponent.prototype.totalPages;
    /** @type {?} */
    PaginationComponent.prototype.displayNumbers;
    /** @type {?} */
    PaginationComponent.prototype.lastPage;
    /**
     * @type {?}
     * @private
     */
    PaginationComponent.prototype._pgs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy11aWtpdC8iLCJzb3VyY2VzIjpbImxpYi9kYXRhdGFibGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFFeEQ7SUE4Q0UsNkJBQW9CLElBQW1CO1FBQW5CLFNBQUksR0FBSixJQUFJLENBQWU7UUFWOUIsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNULGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBSTFDLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFFcEIsbUJBQWMsR0FBVyxDQUFDLENBQUM7UUFDM0IsYUFBUSxHQUFXLENBQUMsQ0FBQztJQUdyQixDQUFDOzs7O0lBRUQsc0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLENBQUMsR0FBRyxDQUFDLEVBQUwsQ0FBSyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7Ozs7SUFFRCwwQ0FBWTs7OztJQUFaLFVBQWEsQ0FBQztRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztZQUNuQixPQUFPLEVBQUUsQ0FBQztTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsMkNBQWE7Ozs7SUFBYixVQUFjLFNBQWlCO1FBQWpCLDBCQUFBLEVBQUEsaUJBQWlCOztZQUN6QixVQUFVLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFFLENBQUM7O1lBQy9FLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLEdBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsa0NBQUk7OztJQUFKO1FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pELENBQUM7Ozs7SUFFRCxrQ0FBSTs7O0lBQUo7UUFDRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixDQUFDO0lBQ0gsQ0FBQzs7Z0JBbkZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLHUxQ0E2Qlg7b0JBQ0MsTUFBTSxFQUFFLENBQUMsNlpBQTZaLENBQUM7aUJBQ3hhOzs7Z0JBbkNPLGFBQWE7Ozs2QkFxQ2xCLEtBQUs7dUJBQ0wsS0FBSzs2QkFDTCxNQUFNOztJQStDVCwwQkFBQztDQUFBLEFBcEZELElBb0ZDO1NBbERZLG1CQUFtQjs7O0lBQzlCLHlDQUE0Qjs7SUFDNUIsbUNBQW1COztJQUNuQix5Q0FBMEM7O0lBRTFDLHdDQUFrQjs7SUFDbEIsb0NBQWE7O0lBQ2Isc0NBQW9COztJQUNwQix5Q0FBa0I7O0lBQ2xCLDZDQUEyQjs7SUFDM0IsdUNBQXFCOzs7OztJQUVULG1DQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7UGFnaW5nU2VydmljZX0gZnJvbSAnLi4vc2VydmljZS9wYWdpbmcuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3VpLXBhZ2luYXRpb24nLFxyXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz1cIm0tM1wiPlxyXG4gIDxuYXYgYXJpYS1sYWJlbD1cIlBhZ2UgbmF2aWdhdGlvbiBleGFtcGxlXCI+XHJcbiAgICA8dWwgY2xhc3M9XCJwYWdpbmF0aW9uIGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cclxuICAgICAgPG5nLWNvbnRhaW5lcj5cclxuXHJcbiAgICAgICAgPGxpIGNsYXNzPVwicGFnZS1pdGVtIFwiIFtuZ0NsYXNzXT1cInsnZGlzYWJsZWQnOnBhZ2VOdW0gPT09IDF9XCIgKGNsaWNrKT1cInByZXYoKVwiIFthdHRyLmRpc2FibGVkXT1cInBhZ2VOdW0gPT09IDFcIj5cclxuICAgICAgICAgIDxhIGNsYXNzPVwicGFnZS1saW5rXCIgdGFiaW5kZXg9XCItMVwiPlByZXZpb3VzIDwvYT5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIiAoY2xpY2spPVwib25QYWdlQ2hhbmdlKHBhZ2UpXCIgKm5nRm9yPVwibGV0IHBhZ2Ugb2YgcGFnZXM7IGluZGV4IGFzIGk7IGZpcnN0IGFzIGlzRmlyc3Q7IGxhc3QgYXMgaXNMYXN0O1wiPlxyXG4gICAgICAgICAgPGEgY2xhc3M9XCJwYWdlLWxpbmtcIiBbbmdDbGFzc109XCJ7J2FjdGl2ZSBkaXNhYmxlZCc6cGFnZU51bT09PXBhZ2V9XCI+e3twYWdlfX08L2E+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpIGNsYXNzPVwicGFnZS1pdGVtXCIgKm5nSWY9XCIgcGFnZUNvdW50ID4gZGlzcGxheU51bWJlcnMgJiYgbGFzdFBhZ2UgPCBwYWdlQ291bnRcIiBbbmdDbGFzc109XCJ7J2Rpc2FibGVkJzpwYWdlTnVtPT09cGFnZXMubGVuZ3RofVwiIChjbGljayk9XCJzaGlmdEJvdW5kYXJ5KClcIj5cclxuICAgICAgICAgIDxhIGNsYXNzPVwicGFnZS1saW5rXCI+Li4uPC9hPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaSBjbGFzcz1cInBhZ2UtaXRlbVwiICpuZ0lmPVwicGFnZUNvdW50ID4gZGlzcGxheU51bWJlcnMgJiYgbGFzdFBhZ2UgPCBwYWdlQ291bnRcIiBbbmdDbGFzc109XCJ7J2Rpc2FibGVkJzpwYWdlTnVtPT09cGFnZUNvdW50fVwiIChjbGljayk9XCJvblBhZ2VDaGFuZ2UocGFnZUNvdW50KVwiPlxyXG4gICAgICAgICAgPGEgY2xhc3M9XCJwYWdlLWxpbmtcIj4ge3twYWdlQ291bnR9fTwvYT5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIiBbbmdDbGFzc109XCJ7J2Rpc2FibGVkJzpwYWdlTnVtID09PSBwYWdlQ291bnR9XCIgW2F0dHIuZGlzYWJsZWRdPVwiKHBhZ2VOdW0gPT09IHBhZ2VDb3VudCk/J2Rpc2FibGVkJzonJ1wiIChjbGljayk9XCJuZXh0KClcIj5cclxuICAgICAgICAgIDxhIGNsYXNzPVwicGFnZS1saW5rXCI+IE5leHQ8L2E+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8L3VsPlxyXG4gIDwvbmF2PlxyXG48L2Rpdj5cclxuXHJcbmAsXHJcbiAgc3R5bGVzOiBbYC5wYWdlLWxpbms6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pe3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzouNXJlbSAuNzVyZW07bWFyZ2luLWxlZnQ6LTFweDtsaW5lLWhlaWdodDoxLjI1O2NvbG9yOiMzMzdhYjc7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI2RlZTJlNn0ucGFnZS1saW5rLmFjdGl2ZTpub3QoW2hyZWZdKTpub3QoW3RhYmluZGV4XSl7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztwYWRkaW5nOi41cmVtIC43NXJlbTttYXJnaW4tbGVmdDotMXB4O2xpbmUtaGVpZ2h0OjEuMjU7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMzMzdhYjc7Ym9yZGVyOjFweCBzb2xpZCAjMzM3YWI3fS5kaXNhYmxlZHtwb2ludGVyLWV2ZW50czpub25lfWBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQYWdpbmF0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASW5wdXQoKSB0b3RhbENvdW50OiBudW1iZXI7XHJcbiAgQElucHV0KCkgc2l6ZSA9IDEwO1xyXG4gIEBPdXRwdXQoKSBwYWdlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBwYWdlQ291bnQ6IG51bWJlcjtcclxuICBwYWdlczogYW55W107XHJcbiAgcGFnZU51bTogbnVtYmVyID0gMTtcclxuICB0b3RhbFBhZ2VzOiBhbnlbXTtcclxuICBkaXNwbGF5TnVtYmVyczogbnVtYmVyID0gNTtcclxuICBsYXN0UGFnZTogbnVtYmVyID0gNTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfcGdzOiBQYWdpbmdTZXJ2aWNlKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuX3Bncy5zaXplID0gdGhpcy5zaXplO1xyXG4gICAgdGhpcy5fcGdzLnRvdGFsQ291bnQgPSB0aGlzLnRvdGFsQ291bnQ7XHJcbiAgICB0aGlzLnBhZ2VDb3VudCA9IHRoaXMuX3Bncy5nZXRMaXN0T2ZQYWdlKHRoaXMudG90YWxDb3VudCk7XHJcbiAgICB0aGlzLnRvdGFsUGFnZXMgPSBBcnJheSh0aGlzLnBhZ2VDb3VudCkuZmlsbCgwKS5tYXAoKGUsIGkpID0+IGkgKyAxKTtcclxuICAgIHRoaXMucGFnZXMgPSB0aGlzLnRvdGFsUGFnZXMuc2xpY2UoMCwgNSk7XHJcbiAgICB0aGlzLmxhc3RQYWdlID0gdGhpcy5wYWdlc1t0aGlzLmRpc3BsYXlOdW1iZXJzIC0gMV07XHJcbiAgfVxyXG5cclxuICBvblBhZ2VDaGFuZ2UoZSkge1xyXG4gICAgY29uc29sZS5sb2coZSk7XHJcbiAgICB0aGlzLnBhZ2VOdW0gPSBlO1xyXG4gICAgdGhpcy5wYWdlQ2hhbmdlLmVtaXQoe1xyXG4gICAgICBwYWdlTnVtOiBlXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNoaWZ0Qm91bmRhcnkoaXNSZXZlcnNlID0gZmFsc2UpIHtcclxuICAgIGxldCBzdGFydEluZGV4ID0gKGlzUmV2ZXJzZSkgPyB0aGlzLnBhZ2VOdW0gLSB0aGlzLmRpc3BsYXlOdW1iZXJzIDogdGhpcy5wYWdlTnVtIC0xO1xyXG4gICAgbGV0IGxhc3RJbmRleCA9IChpc1JldmVyc2UpID8gdGhpcy5wYWdlTnVtIDogdGhpcy5wYWdlTnVtICsgdGhpcy5kaXNwbGF5TnVtYmVycy0xO1xyXG4gICAgdGhpcy5wYWdlcyA9IHRoaXMudG90YWxQYWdlcy5zbGljZShzdGFydEluZGV4LCBsYXN0SW5kZXgpO1xyXG4gICAgdGhpcy5sYXN0UGFnZSA9IGxhc3RJbmRleDtcclxuICB9XHJcblxyXG4gIG5leHQoKSB7XHJcbiAgICB0aGlzLnBhZ2VOdW0rKztcclxuICAgIGlmICh0aGlzLnBhZ2VOdW0gPiB0aGlzLmxhc3RQYWdlKSB0aGlzLnNoaWZ0Qm91bmRhcnkoKTtcclxuICB9XHJcblxyXG4gIHByZXYoKSB7XHJcbiAgICB0aGlzLnBhZ2VOdW0tLTtcclxuICAgIGlmICgodGhpcy5wYWdlTnVtKSAlIHRoaXMuZGlzcGxheU51bWJlcnMgPT09IDApIHtcclxuICAgICAgdGhpcy5zaGlmdEJvdW5kYXJ5KHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=